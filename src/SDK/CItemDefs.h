// Copyright (c) 2022 Marco Wang <m.aesophor@gmail.com>. All rights reserved.
#ifndef HAVOC_C_ITEM_DEFS_H_
#define HAVOC_C_ITEM_DEFS_H_

enum CItemDef : short {
  WEAPON_UNDEFINED = 0,
  WEAPON_DEAGLE = 1,
  WEAPON_ELITE,
  WEAPON_FIVESEVEN,
  WEAPON_GLOCK,
  WEAPON_AK47 = 7,
  WEAPON_AUG,
  WEAPON_AWP,
  WEAPON_FAMAS,
  WEAPON_G3SG1,
  WEAPON_GALILAR = 13,
  WEAPON_M249,
  WEAPON_M4A1 = 16,
  WEAPON_MAC10,
  WEAPON_P90 = 19,
  WEAPON_ZONE_REPULSOR,
  WEAPON_MP5SD = 23,
  WEAPON_UMP45,
  WEAPON_XM1014,
  WEAPON_BIZON,
  WEAPON_MAG7,
  WEAPON_NEGEV,
  WEAPON_SAWEDOFF,
  WEAPON_TEC9,
  WEAPON_TASER,
  WEAPON_HKP2000,
  WEAPON_MP7,
  WEAPON_MP9,
  WEAPON_NOVA,
  WEAPON_P250,
  WEAPON_SHIELD,
  WEAPON_SCAR20,
  WEAPON_SG556,
  WEAPON_SSG08,
  WEAPON_KNIFEGG,
  WEAPON_KNIFE,
  WEAPON_FLASHBANG,
  WEAPON_HEGRENADE,
  WEAPON_SMOKEGRENADE,
  WEAPON_MOLOTOV,
  WEAPON_DECOY,
  WEAPON_INCGRENADE,
  WEAPON_C4,
  ITEM_KEVLAR,
  ITEM_ASSAULTSUIT,
  ITEM_HEAVYASSAULTSUIT,
  ITEM_NVG = 54,
  ITEM_DEFUSER,
  ITEM_CUTTERS,
  WEAPON_HEALTHSHOT,
  WEAPON_KNIFE_T = 59,
  WEAPON_M4A1_SILENCER,
  WEAPON_USP_SILENCER,
  WEAPON_CZ75A = 63,
  WEAPON_REVOLVER,
  WEAPON_TAGRENADE = 68,
  WEAPON_FISTS,
  WEAPON_BREACHCHARGE,
  WEAPON_TABLET = 72,
  WEAPON_MELEE = 74,
  WEAPON_AXE,
  WEAPON_HAMMER,
  WEAPON_SPANNER = 78,
  WEAPON_KNIFE_GHOST = 80,
  WEAPON_FIREBOMB,
  WEAPON_DIVERSION,
  WEAPON_FRAG_GRENADE,
  WEAPON_SNOWBALL,
  WEAPON_BUMPMINE,
  WEAPON_BAYONET = 500,
  WEAPON_KNIFE_CSS = 503,
  WEAPON_KNIFE_FLIP = 505,
  WEAPON_KNIFE_GUT,
  WEAPON_KNIFE_KARAMBIT,
  WEAPON_KNIFE_M9_BAYONET,
  WEAPON_KNIFE_TACTICAL,
  WEAPON_KNIFE_FALCHION = 512,
  WEAPON_KNIFE_SURVIVAL_BOWIE = 514,
  WEAPON_KNIFE_BUTTERFLY,
  WEAPON_KNIFE_PUSH,
  WEAPON_KNIFE_CORD,
  WEAPON_KNIFE_CANIS,
  WEAPON_KNIFE_URSUS,
  WEAPON_KNIFE_GYPSY_JACKKNIFE,
  WEAPON_KNIFE_OUTDOOR,
  WEAPON_KNIFE_STILETTO,
  WEAPON_KNIFE_WIDOWMAKER,
  WEAPON_KNIFE_SKELETON = 525,
  CUSTOMPLAYER_CTM_ST6_VARIANTJ = 4619,
  CUSTOMPLAYER_CTM_ST6_VARIANTL = 4680,
  CUSTOMPLAYER_CTM_SWAT_VARIANTE = 4711,
  CUSTOMPLAYER_CTM_SWAT_VARIANTF,
  CUSTOMPLAYER_CTM_SWAT_VARIANTG,
  CUSTOMPLAYER_CTM_SWAT_VARIANTH,
  CUSTOMPLAYER_CTM_SWAT_VARIANTI,
  CUSTOMPLAYER_CTM_SWAT_VARIANTJ,
  CUSTOMPLAYER_TM_BALKAN_VARIANTK = 4718,
  STUDDED_BROKENFANG_GLOVES = 4725,
  CUSTOMPLAYER_TM_PROFESSIONAL_VARF,
  CUSTOMPLAYER_TM_PROFESSIONAL_VARG,
  CUSTOMPLAYER_TM_PROFESSIONAL_VARH,
  CUSTOMPLAYER_TM_PROFESSIONAL_VARJ = 4730,
  CUSTOMPLAYER_TM_PROFESSIONAL_VARI = 4732,
  CUSTOMPLAYER_TM_PROFESSIONAL_VARF1,
  CUSTOMPLAYER_TM_PROFESSIONAL_VARF2,
  CUSTOMPLAYER_TM_PROFESSIONAL_VARF3,
  CUSTOMPLAYER_TM_PROFESSIONAL_VARF4,
  STUDDED_BLOODHOUND_GLOVES = 5027,
  T_GLOVES,
  CT_GLOVES,
  SPORTY_GLOVES,
  SLICK_GLOVES,
  LEATHER_HANDWRAPS,
  MOTORCYCLE_GLOVES,
  SPECIALIST_GLOVES,
  STUDDED_HYDRA_GLOVES,
  CUSTOMPLAYER_T_MAP_BASED,
  CUSTOMPLAYER_CT_MAP_BASED,
  CUSTOMPLAYER_TM_ANARCHIST,
  CUSTOMPLAYER_TM_ANARCHIST_VARIANTA,
  CUSTOMPLAYER_TM_ANARCHIST_VARIANTB,
  CUSTOMPLAYER_TM_ANARCHIST_VARIANTC,
  CUSTOMPLAYER_TM_ANARCHIST_VARIANTD,
  CUSTOMPLAYER_TM_PIRATE,
  CUSTOMPLAYER_TM_PIRATE_VARIANTA,
  CUSTOMPLAYER_TM_PIRATE_VARIANTB,
  CUSTOMPLAYER_TM_PIRATE_VARIANTC,
  CUSTOMPLAYER_TM_PIRATE_VARIANTD,
  CUSTOMPLAYER_TM_PROFESSIONAL,
  CUSTOMPLAYER_TM_PROFESSIONAL_VAR1,
  CUSTOMPLAYER_TM_PROFESSIONAL_VAR2,
  CUSTOMPLAYER_TM_PROFESSIONAL_VAR3,
  CUSTOMPLAYER_TM_PROFESSIONAL_VAR4,
  CUSTOMPLAYER_TM_SEPARATIST,
  CUSTOMPLAYER_TM_SEPARATIST_VARIANTA,
  CUSTOMPLAYER_TM_SEPARATIST_VARIANTB,
  CUSTOMPLAYER_TM_SEPARATIST_VARIANTC,
  CUSTOMPLAYER_TM_SEPARATIST_VARIANTD,
  CUSTOMPLAYER_CTM_GIGN,
  CUSTOMPLAYER_CTM_GIGN_VARIANTA,
  CUSTOMPLAYER_CTM_GIGN_VARIANTB,
  CUSTOMPLAYER_CTM_GIGN_VARIANTC,
  CUSTOMPLAYER_CTM_GIGN_VARIANTD,
  CUSTOMPLAYER_CTM_GSG9,
  CUSTOMPLAYER_CTM_GSG9_VARIANTA,
  CUSTOMPLAYER_CTM_GSG9_VARIANTB,
  CUSTOMPLAYER_CTM_GSG9_VARIANTC,
  CUSTOMPLAYER_CTM_GSG9_VARIANTD,
  CUSTOMPLAYER_CTM_IDF,
  CUSTOMPLAYER_CTM_IDF_VARIANTB,
  CUSTOMPLAYER_CTM_IDF_VARIANTC,
  CUSTOMPLAYER_CTM_IDF_VARIANTD,
  CUSTOMPLAYER_CTM_IDF_VARIANTE,
  CUSTOMPLAYER_CTM_IDF_VARIANTF,
  CUSTOMPLAYER_CTM_SWAT,
  CUSTOMPLAYER_CTM_SWAT_VARIANTA,
  CUSTOMPLAYER_CTM_SWAT_VARIANTB,
  CUSTOMPLAYER_CTM_SWAT_VARIANTC,
  CUSTOMPLAYER_CTM_SWAT_VARIANTD,
  CUSTOMPLAYER_CTM_SAS_VARIANTA,
  CUSTOMPLAYER_CTM_SAS_VARIANTB,
  CUSTOMPLAYER_CTM_SAS_VARIANTC,
  CUSTOMPLAYER_CTM_SAS_VARIANTD,
  CUSTOMPLAYER_CTM_ST6,
  CUSTOMPLAYER_CTM_ST6_VARIANTA,
  CUSTOMPLAYER_CTM_ST6_VARIANTB,
  CUSTOMPLAYER_CTM_ST6_VARIANTC,
  CUSTOMPLAYER_CTM_ST6_VARIANTD,
  CUSTOMPLAYER_TM_BALKAN_VARIANTE,
  CUSTOMPLAYER_TM_BALKAN_VARIANTA,
  CUSTOMPLAYER_TM_BALKAN_VARIANTB,
  CUSTOMPLAYER_TM_BALKAN_VARIANTC,
  CUSTOMPLAYER_TM_BALKAN_VARIANTD,
  CUSTOMPLAYER_TM_JUMPSUIT_VARIANTA,
  CUSTOMPLAYER_TM_JUMPSUIT_VARIANTB,
  CUSTOMPLAYER_TM_JUMPSUIT_VARIANTC,
  CUSTOMPLAYER_TM_PHOENIX_HEAVY,
  CUSTOMPLAYER_CTM_HEAVY,
  CUSTOMPLAYER_TM_LEET_VARIANTA = 5100,
  CUSTOMPLAYER_TM_LEET_VARIANTB,
  CUSTOMPLAYER_TM_LEET_VARIANTC,
  CUSTOMPLAYER_TM_LEET_VARIANTD,
  CUSTOMPLAYER_TM_LEET_VARIANTE,
  CUSTOMPLAYER_TM_LEET_VARIANTG,
  CUSTOMPLAYER_TM_LEET_VARIANTH,
  CUSTOMPLAYER_TM_LEET_VARIANTI,
  CUSTOMPLAYER_TM_LEET_VARIANTF,
  CUSTOMPLAYER_TM_PHOENIX = 5200,
  CUSTOMPLAYER_TM_PHOENIX_VARIANTA,
  CUSTOMPLAYER_TM_PHOENIX_VARIANTB,
  CUSTOMPLAYER_TM_PHOENIX_VARIANTC,
  CUSTOMPLAYER_TM_PHOENIX_VARIANTD,
  CUSTOMPLAYER_TM_PHOENIX_VARIANTH,
  CUSTOMPLAYER_TM_PHOENIX_VARIANTF,
  CUSTOMPLAYER_TM_PHOENIX_VARIANTG,
  CUSTOMPLAYER_TM_PHOENIX_VARIANTI,
  CUSTOMPLAYER_CTM_FBI = 5300,
  CUSTOMPLAYER_CTM_FBI_VARIANTA,
  CUSTOMPLAYER_CTM_FBI_VARIANTC,
  CUSTOMPLAYER_CTM_FBI_VARIANTD,
  CUSTOMPLAYER_CTM_FBI_VARIANTE,
  CUSTOMPLAYER_CTM_FBI_VARIANTF,
  CUSTOMPLAYER_CTM_FBI_VARIANTG,
  CUSTOMPLAYER_CTM_FBI_VARIANTH,
  CUSTOMPLAYER_CTM_FBI_VARIANTB,
  CUSTOMPLAYER_CTM_ST6_VARIANTK = 5400,
  CUSTOMPLAYER_CTM_ST6_VARIANTE,
  CUSTOMPLAYER_CTM_ST6_VARIANTG,
  CUSTOMPLAYER_CTM_ST6_VARIANTM,
  CUSTOMPLAYER_CTM_ST6_VARIANTI,
  CUSTOMPLAYER_TM_BALKAN_VARIANTF = 5500,
  CUSTOMPLAYER_TM_BALKAN_VARIANTI,
  CUSTOMPLAYER_TM_BALKAN_VARIANTG,
  CUSTOMPLAYER_TM_BALKAN_VARIANTJ,
  CUSTOMPLAYER_TM_BALKAN_VARIANTH,
  CUSTOMPLAYER_TM_BALKAN_VARIANTL,
  CUSTOMPLAYER_CTM_SAS = 5600,
  CUSTOMPLAYER_CTM_SAS_VARIANTF
};

enum CWeaponType : int {
  WEAPONTYPE_KNIFE = 0,
  WEAPONTYPE_PISTOL = 1,
  WEAPONTYPE_SUBMACHINEGUN = 2,
  WEAPONTYPE_RIFLE = 3,
  WEAPONTYPE_SHOTGUN = 4,
  WEAPONTYPE_SNIPER = 5,
  WEAPONTYPE_MACHINEGUN = 6,
  WEAPONTYPE_C4 = 7,
  WEAPONTYPE_PLACEHOLDER = 8,
  WEAPONTYPE_GRENADE = 9,
  WEAPONTYPE_HEALTHSHOT = 11,
  WEAPONTYPE_FISTS = 12,
  WEAPONTYPE_BREACHCHARGE = 13,
  WEAPONTYPE_BUMPMINE = 14,
  WEAPONTYPE_TABLET = 15,
  WEAPONTYPE_MELEE = 16
};

enum CWeaponSound {
  WEAPONSOUND_EMPTY,
  WEAPONSOUND_SINGLE,
  WEAPONSOUND_SINGLE_NPC,
  WEAPONSOUND_WPN_DOUBLE, // Can't be "DOUBLE" because windows.h uses it.
  WEAPONSOUND_DOUBLE_NPC,
  WEAPONSOUND_BURST,
  WEAPONSOUND_RELOAD,
  WEAPONSOUND_RELOAD_NPC,
  WEAPONSOUND_MELEE_MISS,
  WEAPONSOUND_MELEE_HIT,
  WEAPONSOUND_MELEE_HIT_WORLD,
  WEAPONSOUND_SPECIAL1,
  WEAPONSOUND_SPECIAL2,
  WEAPONSOUND_SPECIAL3,
  WEAPONSOUND_TAUNT,
  WEAPONSOUND_FAST_RELOAD,
  // Add new shoot sound types here
  WEAPONSOUND_SIZE
};

inline bool IsPistol(const CItemDef def) {
  switch (def) {
    case WEAPON_DEAGLE:
    case WEAPON_ELITE:
    case WEAPON_FIVESEVEN:
    case WEAPON_GLOCK:
    case WEAPON_TEC9:
    case WEAPON_HKP2000:
    case WEAPON_USP_SILENCER:
    case WEAPON_P250:
    case WEAPON_CZ75A:
    case WEAPON_REVOLVER:
      return true;
    default:
      return false;
  }
}

inline bool IsAutomatic(const CItemDef def) {
  switch (def) {
    case WEAPON_AK47:
    case WEAPON_AUG:
    case WEAPON_FAMAS:
    case WEAPON_GALILAR:
    case WEAPON_M249:
    case WEAPON_M4A1:
    case WEAPON_M4A1_SILENCER:
    case WEAPON_MAC10:
    case WEAPON_P90:
    case WEAPON_MP5SD:
    case WEAPON_UMP45:
    case WEAPON_BIZON:
    case WEAPON_NEGEV:
    case WEAPON_MP7:
    case WEAPON_MP9:
    case WEAPON_SG556:
      return true;
    default:
      return false;
  }
}

inline bool IsKnife(const CItemDef def) {
  switch (def) {
    case WEAPON_BAYONET:
    case WEAPON_KNIFE:
    case WEAPON_KNIFE_T:
    case WEAPON_KNIFE_GUT:
    case WEAPON_KNIFEGG:
    case WEAPON_KNIFE_CSS:
    case WEAPON_KNIFE_CORD:
    case WEAPON_KNIFE_FLIP:
    case WEAPON_KNIFE_PUSH:
    case WEAPON_KNIFE_CANIS:
    case WEAPON_KNIFE_GHOST:
    case WEAPON_KNIFE_URSUS:
    case WEAPON_KNIFE_OUTDOOR:
    case WEAPON_KNIFE_FALCHION:
    case WEAPON_KNIFE_KARAMBIT:
    case WEAPON_KNIFE_SKELETON:
    case WEAPON_KNIFE_STILETTO:
    case WEAPON_KNIFE_TACTICAL:
    case WEAPON_KNIFE_BUTTERFLY:
    case WEAPON_KNIFE_WIDOWMAKER:
    case WEAPON_KNIFE_M9_BAYONET:
    case WEAPON_KNIFE_SURVIVAL_BOWIE:
    case WEAPON_KNIFE_GYPSY_JACKKNIFE:
      return true;
    default:
      return false;
  }
}

inline bool IsGrenade(const CItemDef def) {
  switch (def) {
    case WEAPON_SMOKEGRENADE:
    case WEAPON_HEGRENADE:
    case WEAPON_INCGRENADE:
    case WEAPON_FLASHBANG:
    case WEAPON_MOLOTOV:
    case WEAPON_DECOY:
      return true;
    default:
      return false;
  }
}

inline bool IsBomb(const CItemDef def) {
  return def == WEAPON_C4;
}

inline bool CanScope(const CItemDef def) {
  switch (def) {
    case WEAPON_AUG:
    case WEAPON_AWP:
    case WEAPON_G3SG1:
    case WEAPON_SCAR20:
    case WEAPON_SG556:
    case WEAPON_SSG08:
      return true;
    default:
      return false;
  }
}

#endif  // HAVOC_C_ITEM_DEFS_H_
